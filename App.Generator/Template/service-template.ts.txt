import \{ Injectable, inject \} from '@angular/core';
import \{ HttpClient \} from '@angular/common/http';
import \{ Observable, of, finalize, BehaviorSubject \} from 'rxjs';
import \{ catchError, map \} from 'rxjs/operators';
import \{ {__NAME_PROP__} \} from '../page-entities/{__NAME_LOW__}.entity';
import \{ withNoGlobalLoaderGif \} from './../../shared/auth.interceptor';
import \{ PageCommonService \} from './../page-common.service';
import \{ ListingResponse \} from './../page-entities/listing-response.entity';

@Injectable(\{
  providedIn: 'root'
\})
export class {__NAME_PROP__}Service extends PageCommonService \{
  private baseUrl: string;
  private emptyListingResponse: ListingResponse<{__NAME_PROP__}> = \{ pageSize: 0, totalPageCount: 0, totalItemCount: 0, currentPageNo: 0, data: [] \};

  constructor(override http: HttpClient) \{
    super(http);
    this.baseUrl = `$\{this.apiBaseUrl\}/{__NAME_LOW__}`
  \}

  list(pageNo: number = 0): Observable<ListingResponse<{__NAME_PROP__}>> \{
    this.showLoader();
    return this.http.get<\{ isSuccess: boolean, data: ListingResponse<{__NAME_PROP__}> \}>(`$\{this.baseUrl\}?pageNo=$\{pageNo\}`, \{ context: withNoGlobalLoaderGif() \}).pipe(
      map((response) => \{
        if (response.isSuccess) \{
          return response.data;
        \} else \{
          return this.emptyListingResponse;
        \}
      \}),
      catchError(() => \{
        return of(this.emptyListingResponse);
      \}))
      .pipe(finalize(() => this.hideLoader()));
  \}

  search(q: string): Observable<ListingResponse<{__NAME_PROP__}>> \{
    this.showLoader();
    return this.http.get<\{ isSuccess: boolean, data: ListingResponse<{__NAME_PROP__}> \}>(`$\{this.baseUrl\}/search?q=$\{q\}`, \{ context: withNoGlobalLoaderGif() \}).pipe(
      map((response) => \{
        if (response.isSuccess) \{
          return response.data;
        \} else \{
          return this.emptyListingResponse;
        \}
      \}),
      catchError(() => \{
        return of(this.emptyListingResponse);
      \}))
      .pipe(finalize(() => this.hideLoader()));
  \}

  add(obj: {__NAME_PROP__}): Observable<\{ isSuccess: boolean, message: string \}> \{
    this.showLoader();
    return this.http.post<\{ isSuccess: boolean, message: string \}>(this.baseUrl, obj)
      .pipe(finalize(() => this.hideLoader()));
  \}

  get(id: number): Observable<{__NAME_PROP__}> \{
    this.showLoader();
    return this.http.get<{__NAME_PROP__}>(`$\{this.baseUrl\}/$\{id\}`)
      .pipe(finalize(() => this.hideLoader()));
  \}

  edit(obj: {__NAME_PROP__}): Observable<\{ isSuccess: boolean, message: string \}> \{
    this.showLoader();
    return this.http.put<\{ isSuccess: boolean, message: string \}>(this.baseUrl, obj)
      .pipe(finalize(() => this.hideLoader()));
  \}

  delete(id: number): Observable<\{ isSuccess: boolean, message: string \}> \{
    this.showLoader();
    return this.http.delete<\{ isSuccess: boolean, message: string \}>(`$\{this.baseUrl\}/$\{id\}`)
      .pipe(finalize(() => this.hideLoader()));
  \}
\}